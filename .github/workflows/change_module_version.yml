name: Change module version

on:
  push:
    branches:
      - main

jobs:
  change_module_version:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with: 
          fetch-depth: 0

      - name: Setup Git Config
        run: |
        
          # Setup the username and email.
          git config user.name "GitHub Actions Bot"
          git config user.email "<>"

      - name: Increment last number and set new version
        run: |
          VERSION="12.0.0.0"
          LAST_NUMBER=$(echo $VERSION | awk -F. '{print $NF}')
          echo $LAST_NUMBER
          NEW_LAST_NUMBER=$((LAST_NUMBER + 1))
          NEW_VERSION=$(echo $VERSION | awk -F. -v OFS=. '{$NF=""; print $0$NEW_LAST_NUMBER}')
          echo "New version is $NEW_VERSION"

      - name: Get changed directories
        id: get-changes
        run: |

          changed_files=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }})
          
          changed_directories=()
          for file in ${changed_files[@]}; do
            echo "$file"
            if [[ "${file}" == .* ]]; then
              echo "skip on start"
              continue
            fi

            if [[ "${file}" == *"/"* ]]; then
              # Split value by /
              IFS='/' read -ra parts <<< "$file"

              # Get the first component as modified value
              directory_name="${parts[0]}"
            else
              echo "skip on split"
              continue
            fi
            
            echo "$directory_name"
            # Check if the modified value is not already in the list
            if [[ ! " ${changed_directories[@]} " =~ " ${directory_name} " ]]; then
                # Add the modified value to the list
                changed_directories+=("${directory_name}")
            fi

          done
          echo "Modified and Unique Values ${changed_directories[@]}"

          new_changes=false
          # Find all first level folders in repository 
          all_directories=$(find . -maxdepth 1 -type d -not -name ".*")
          for dir in ${changed_directories[@]}; do
            file_path="${dir}/__manifest__.py"
            # Check if the folder has a file named __manifest__.py at depth 1
            if [[ -f ${file_path} ]]; then
              echo "${dir} has manifest"
              if grep -qE '^[[:space:]]*('\''version'\''|"version")' "${file_path}"; then
                echo "File ${file_path} contains a line starting with 'version' or \"version\""
                value=$(grep -Eo '^[[:space:]]*('\''version'\''|"version")[[:space:]]*:[[:space:]]*['\''"]([^'\''"]+)['\''"]' "${file_path}" | awk -F'[:,]' '{print $2}' | tr -d '[:space:]')
                if [ -n "${value}" ]; then
                  echo "Found version value ${value}"
                  # You can use the extracted value in further logic
                else
                  echo "Failed to extract version value from ${file_path}. Adding base version"
                  # sed -i -E 's/^[[:space:]]*('\''version'\''|"version")[[:space:]]*:[[:space:]]*['\'']([^'\''"]+)['\'']/"version"'\:' "15.0.0.0"/' "${file_path}"
                  # echo updated
                  # # Stage the changes
                  # git add ${file_path}
                  # new_changes=true
                fi
              else
                echo "File ${file_path} does not contain a line starting with 'version' or \"version\""
              fi
            else
              echo "skip module $dir no manifest"
              continue
            fi
          done

          # Check if there are changes
          if [ "$new_changes" = true ]; then
              # Commit the changes with a custom message
              git commit -m "Change or add version"

              # Push the changes back to the repository
              git push
          fi


        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}