name: Change module version

on:
  push:
    branches:
      - main

jobs:
  change_module_version:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with: 
          fetch-depth: 0

      - name: Setup Git Config
        run: |
        
          # Setup the username and email.
          git config user.name "GitHub Actions Bot"
          git config user.email "<>"


      - name: Get changed directories
        id: get-changes
        run: |

          changed_files=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }})
          changed_directories=()
          for file in ${changed_files[@]}; do
            if [[ "${file}" == .* ]]; then
              continue
            fi

            if [[ "${file}" == *"/"* ]]; then
              # Split value by /
              IFS='/' read -ra parts <<< "$file"

              # Get the first component as modified value
              directory_name="${parts[0]}"
            else
              continue
            fi
            
            # Check if the modified value is not already in the list
            if [[ ! " ${changed_directories[@]} " =~ " ${directory_name} " ]]; then
                # Add the modified value to the list
                changed_directories+=("${directory_name}")
            fi

          done

          new_changes=false
          for dir in ${changed_directories[@]}; do
            echo "working on ${dir}"
            file_path="${dir}/__manifest__.py"
            # Check if __manifest__.py was modified in this folder
            if [[ $changed_files == *"$file_path"* ]]; then
                echo "__manifest__.py was modified in this folder, version will not be increased"
                continue
            fi

            # Check if the folder has a file named __manifest__.py at depth 1
            if [[ -f ${file_path} ]]; then
              echo "${dir} has __manifest__.py"
              if grep -qE '^[[:space:]]*('\''version'\''|"version")' "${file_path}"; then
                echo "${file_path} contains a line starting with 'version' or \"version\""

                value=$(grep -Eo '^[[:space:]]*('\''version'\''|"version")[[:space:]]*:[[:space:]]*['\''"]([^'\''"]+)['\''"],' "${file_path}" | awk -F'[:,]' '{print $2}' | tr -d '[:space:]')
                if [ -n "${value}" ]; then
                  echo "Found version value"
                  # Remove quotes from value
                  value="${value//\"/}"
                  # Increment the last number by one
                  LAST_NUMBER=$(echo ${value} | awk -F. '{print $NF}')
                  NEW_LAST_NUMBER=$((LAST_NUMBER + 1))
                  NEW_VERSION=$(echo $value | awk -F. -v OFS=. -v NEW_LAST_NUMBER="${NEW_LAST_NUMBER}" '{$NF=""; print $0 NEW_LAST_NUMBER}')
                  # Change the version line with new version
                  sed -i -E 's/^[[:space:]]*('\''version'\''|"version")[[:space:]]*:[[:space:]]*['\''"]([^'\''"]+)['\''"],/    "version"'\:' "'$NEW_VERSION'",/' "${file_path}"
                  new_changes=true
                else
                  echo "Failed to extract version value from ${file_path}. Adding a default value"
                  sed -i -E 's/^[[:space:]]*('\''version'\''|"version")[[:space:]]*:.*/    "version"'\:' "15.0.0.0",/' "${file_path}"
                  new_changes=true
                  
                fi
              else
                echo "File ${file_path} does not contain a line starting with 'version' or \"version\""
              fi
            else
              echo "${dir} has __manifest__.py. Skipping directory."
              continue
            fi
          done

          # Check if there are changes
          if [ "$new_changes" = true ]; then
              # Stage the changes
              git add ${changed_directories[@]}

              # Commit the changes with a custom message
              git commit -m "Change or add version"

              # Push the changes back to the repository
              git push
          fi


        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}